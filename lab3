{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM3VqoTs0yd5TyPGGDX+SJO",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/bandamakarsh/2303a53018-aiml-/blob/main/lab3\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "cF6GWOt97Hu0"
      },
      "outputs": [],
      "source": [
        "from collections import namedtuple,Counter,defaultdict\n",
        "import random\n",
        "import math\n",
        "import functools\n",
        "cache = functools.lru_cache(10**6)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class Game :\n",
        "  def actions(self,state):\n",
        "    raise NotImplementedError\n",
        "  def result(self,state,move):\n",
        "    raise NotImplementedError\n",
        "  def is_terminal (self, state ):\n",
        "    return not self.actions(state)\n",
        "  def utility(self, state , player ):\n",
        "    raise NotImplementedError"
      ],
      "metadata": {
        "id": "kxpH97PB8hEl"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def play_game (game , strategies: dict):\n",
        "\n",
        "\n",
        "  state = game.initial\n",
        "  while not game. is_terminal (state ):\n",
        "   player = state. to_move\n",
        "   move = strategies [player ](game , state)\n",
        "   state = game.result(state , move)\n",
        "  if verbose:\n",
        "     print('Player', player , 'move:', move)\n",
        "     print(state)\n",
        "  return state"
      ],
      "metadata": {
        "id": "D-R6k5wC-HVt"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def minimax_search (game , state ):\n",
        "\n",
        "   player = state.to_move\n",
        "   def max_value (state ):\n",
        "     if game.is_terminal (state ):\n",
        "        return game.utility(state , player), None\n",
        "     v, move = -infinity , None\n",
        "     for a in game.actions(state ):\n",
        "       v2 ,_ = min_value (game.result(state , a))\n",
        "       if v2 > v:\n",
        "         v, move = v2 , a\n",
        "     return v, move"
      ],
      "metadata": {
        "id": "mhm1Jl3l_j1M"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def min_value(state):\n",
        "   if game.is_terminal(state):\n",
        "    return game.utility(state , player), None\n",
        "   v, move = +infinity , None\n",
        "   for a in game.actions(state):\n",
        "    v2 , _ = max_value (game.result(state , a))\n",
        "    if v2 < v:\n",
        "      v, move = v2 , a\n",
        "   return v, move\n",
        "   return max_value (state)\n",
        "infinity = math.inf"
      ],
      "metadata": {
        "id": "f8IWQwQvAl_k"
      },
      "execution_count": 14,
      "outputs": []
    }
  ]
}